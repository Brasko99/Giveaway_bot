import telebot
from telebot import types
import os
import random
import datetime
import time
import urllib.request
import threading
import re
import pickle


os.environ['FILE_EXTENSION'] = 'jpg'
os.environ['CURRENT_FOLDER_NAME'] = 'MyLot3'
os.environ['CHAT_ID'] = '1234567899'
###–ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
TOKEN = '7100567356:AAE3k61dzZEi99QHSMStfxC0SU3HRPyPa_k'
bot = telebot.TeleBot(TOKEN)
###–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
markup = types.ReplyKeyboardMarkup()
btn1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
btn2 = types.KeyboardButton("–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
markup.row(btn1, btn2)
btn3 = types.KeyboardButton("–ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
btn4 = types.KeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
markup.row(btn3, btn4)
###–ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
current_directory1 = os.path.dirname(os.path.realpath(__file__))
# –î–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É –ø–∞–ø–∫—É LOTS
current_directory = os.path.join(current_directory1, "LOTS")
###–°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É LOTS –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('LOTS'):
    os.mkdir('LOTS')
###–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª MyChannels –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
filename = "MyChannels.txt"
if not os.path.exists(filename):
    with open(filename, 'w', encoding='utf-8'):
        pass      
###–ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤    
with open(f'./admins.txt', 'r') as file:
    lines = [line.strip() for line in file]
    admins = [int(line) for line in lines]


@bot.message_handler(func=lambda message: message.from_user.id not in admins)
def handle_message(message):
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")


###–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ä—Ç" 
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ –∫–∞–Ω–∞–ª–µ, –≤ —á–∞—Ç–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ.\n–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à?\n\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /admins", reply_markup=markup)


###–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=["admins"])
def admin_main(message):
    bot.send_message(message.chat.id, 'üçï –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:\n\n/new_admin - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/delete_admin - —É–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/show_admins - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')


###–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=["new_admin"])
def new_admin(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –µ–≥–æ ID.\n–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ–¥–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–µ –∑–Ω–∞–µ—Ç —Å–≤–æ–π ID - –ø–µ—Ä–µ—à–∏—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ.\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ ID\n‚óΩÔ∏è –ü—Ä–∏–º–µ—Ä:\n\n1275473197.')
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –±–æ—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º `userinfobot`.\n\n–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:\n\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ `userinfobot`, –ª–∏–±–æ [–Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å](https://t.me/userinfobot), —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–µ–º—É –Ω–∞–ø—Ä—è–º—É—é.\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Start" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n3. –ë–æ—Ç `userinfobot` –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º Telegram ID, –∞ —Ç–∞–∫–∂–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º—è.')
    bot.register_next_step_handler(message, process_admin_id)
def process_admin_id(message):
    admin_id = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –ª–∏ –¥–ª–∏–Ω—É 10 —Ü–∏—Ñ—Ä
    if not is_valid_admin_id(admin_id):
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 10 —Ü–∏—Ñ—Ä.')
        return new_admin(message)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    if not os.path.exists('admins.txt'):
        with open('admins.txt', 'w'):  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            pass
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    with open('admins.txt', 'r', encoding='utf-8') as file:
        if admin_id in file.read():
            bot.send_message(message.chat.id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.')
            return
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    with open('admins.txt', 'a', encoding='utf-8') as file:
        file.write(f"{admin_id}\n")
    bot.send_message(message.chat.id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.')
def is_valid_admin_id(admin_id):
    return admin_id.isdigit() and len(admin_id) == 10


###–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@bot.message_handler(commands=["delete_admin"])
def delete_admin(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –µ–≥–æ ID.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ /showadmins –∏ –æ–ø—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ.\n‚óΩÔ∏è –ü—Ä–∏–º–µ—Ä:\n\n1275473197.')
    bot.register_next_step_handler(message, delete_admin2)
def delete_admin2(message):
    del_admin = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –ª–∏ –¥–ª–∏–Ω—É 10 —Ü–∏—Ñ—Ä
    if not is_valid_admin_id(del_admin):
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 10 —Ü–∏—Ñ—Ä.')
        return delete_admin(message)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    if not os.path.exists('admins.txt'):
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.')
        return
    with open('admins.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID
    if del_admin not in [line.strip() for line in lines]:
        bot.send_message(message.chat.id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {del_admin} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.')
        return
    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –∏–∑ —Å–ø–∏—Å–∫–∞
    with open('admins.txt', 'w', encoding='utf-8') as file:
        for line in lines:
            if line.strip() != del_admin:
                file.write(line)
    bot.send_message(message.chat.id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {del_admin} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.')
def is_valid_admin_id(admin_id):
    return admin_id.isdigit() and len(admin_id) == 10


###–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=["show_admins"])
def show_admins(message):
    with open('admins.txt', 'r', encoding='utf-8') as file:
        bot.send_message(message.chat.id, f"üçï –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n{', '.join([line.strip() for line in file])}\n\n/admins - –Ω–∞–∑–∞–¥")
    admin_main(message)


###–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏
@bot.message_handler(commands=['My_Lots'])
def My_lots(message):
    folders = [folder for folder in os.listdir(current_directory) if os.path.isdir(os.path.join(current_directory, folder))]
    if len(folders) == 0:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.", reply_markup=markup)
    else:
        spisok = "–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:\n\n"
        for folder in folders:
            with open(f'./LOTS/{folder}/message_data.pkl', 'rb') as file:
                text = pickle.load(file)
            spisok += '‚ñ´Ô∏è' + folder + ': "' + text[:30] + '..."\n\n'
        keyboard = types.InlineKeyboardMarkup()
        knopka = types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞", callback_data='Open_Lot')
        knopka2 = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data='Delete_Lot')
        keyboard.add(knopka)
        keyboard.add(knopka2)
        bot.send_message(message.chat.id, spisok, reply_markup=keyboard)
def Open_lot(message):
    os.environ['CURRENT_FOLDER_NAME'] = message.text
    lot = message.text
    with open(f'./LOTS/{lot}/description.txt', 'r') as description_file:
        data = description_file.read()
    values = data.split('   ,')
    publication_date = values[3]
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    if "RightNow" in publication_date:
        status = f'–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'  
    elif current_time < publication_date:
        status = f'\n–ë—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {publication_date}'
    else:
        status = f'–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
    winners_value = values[1]
    winners_value1 = winners_value.split(':')
    winners_value2 = winners_value1[0]    
    way_of_ending = values[4]
    if 'participants' in way_of_ending:
        way_of_ending1 = way_of_ending.split("  ")
        way_of_ending2 = str(f'\n–ü–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {way_of_ending1[0]} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    else:
        way_of_ending1 = way_of_ending.split("  ")
        way_of_ending2 = str(f'\n–í —É–∫–∞–∑–∞–Ω–Ω–æ–µ ({way_of_ending1[0]}) –≤—Ä–µ–º—è')    
    keyboard = types.InlineKeyboardMarkup()
    knopka = types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data='Finish_Lot')
    knopka1 = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data='Cansel_sure')
    knopka2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='Back_to_My_Lots')
    keyboard.add(knopka)
    keyboard.add(knopka1)
    keyboard.add(knopka2)
    with open(f'./LOTS/{lot}/members.txt', 'r') as members_file:
        members = members_file.read()    
    members_count = members.count('@')    
    if status == "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ":
        with open(f'./LOTS/{lot}/link.txt', 'r') as link_file:
            link = link_file.read()
        status = status + f"\n–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º:\n{link}"
    bot.send_message(message.chat.id, f'‚óΩÔ∏è –°—Ç–∞—Ç—É—Å: {status}\n‚óΩÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_count}\n‚óΩÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_value2}\n‚óΩÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {way_of_ending2}', reply_markup=keyboard)
def Delete_Lot(message):
    lot = message.text
    try:
        path = f"{current_directory}/{lot}"
        for root, dirs, files in os.walk(path, topdown=False):
            for name in files:
                os.remove(os.path.join(root, name))
            for name in dirs:
                os.rmdir(os.path.join(root, name))
        os.rmdir(path)
        bot.send_message(message.chat.id, '–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.', reply_markup=markup)
    except Exception:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ—Ç –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ü—Ä–∏–º–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è:\n\nMyLot1')
        bot.register_next_step_handler(message, Delete_Lot)
def finish_lot_now(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/members.txt', 'r') as members_file:
        members = members_file.read()
    with open(f'./LOTS/{folder_name}/description.txt', 'r',  encoding='utf-8') as description_file:
        data = description_file.read()
    with open(f'./LOTS/{folder_name}/link.txt', 'r') as link_file:
        link = link_file.read()
    values = data.split('   ,')
    winners_value = values[1]
    winners = int(winners_value.split(':')[0])  
    members_list = members.split(',')
    members_list = members_list[:-1]
    winners_list = random.sample(members_list, winners)
    link_data = link.split('/')
    chat_id = str('@' + link_data[3])
    message_id = link_data[4]
    try:
        bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
        text = ''
        keyboard = types.InlineKeyboardMarkup()
        knopka = types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫—É—é —Å–∞–º", callback_data='Publish_results_by_user')
        knopka1 = types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ—Ç–æ–º", callback_data='Publish_results_by_bot')
        keyboard.add(knopka)
        keyboard.add(knopka1)
        for winner in winners_list:
            text += winner + '\n' 
        bot.send_message(message.chat.id, f'C–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n{text}\n–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:', reply_markup=keyboard)    
    except Exception:
        text = ''
        keyboard = types.InlineKeyboardMarkup()
        knopka = types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫—É—é —Å–∞–º", callback_data='Publish_results_by_user')
        knopka1 = types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ—Ç–æ–º", callback_data='Publish_results_by_bot')
        keyboard.add(knopka)
        keyboard.add(knopka1)
        for winner in winners_list:
            text += winner + '\n' 
        bot.send_message(message.chat.id, f'C–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n{text}\n–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:', reply_markup=keyboard)


###–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
def Publish_results_by_bot(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')    
    try:
        file_id = message.photo[-1].file_id if message.photo else message.video.file_id if message.video else message.document.file_id
        file_info = bot.get_file(file_id)        
        file_path = file_info.file_path
        url = f'https://api.telegram.org/file/bot{TOKEN}/{file_path}'
        file_extension = file_info.file_path.split('.')[-1]
        os.environ['FILE_EXTENSION'] = file_extension
        urllib.request.urlretrieve(url, f'./LOTS/{folder_name}/Finish_file.{file_extension}')    
        description = str(message.caption) if message.caption else 'No_Caption'
        with open(f'./LOTS/{folder_name}/Finish_message_data.pkl', 'wb') as file:
            pickle.dump(description, file)
        bot.send_message(message.chat.id, "‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception:
        description = str(message.text)
        with open(f'./LOTS/{folder_name}/Finish_message_data.pkl', 'wb') as file:
            pickle.dump(description, file)
        bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    keyboard = types.InlineKeyboardMarkup()
    knopka2 = types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ/–∫–∞–Ω–∞–ª–∞—Ö –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data='Finish_Channel_for_publish_from_list')
    knopka = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫", callback_data='Finish_Add_channel_to_list')
    keyboard.add(knopka)
    with open(f'./MyChannels.txt', 'r') as description_file:
        data = description_file.read()
        if not data:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=keyboard)
        else:
            keyboard.add(knopka2)
            channels = data.split(",")
            spisok = ""
            if len(channels) == 1:
                spisok = channels[0].rstrip(',')
            else:
                for channel in channels:
                    spisok = spisok + channel + "\n"
            bot.send_message(message.chat.id, f'–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n{spisok}', reply_markup=keyboard)
def Finish_Channel_for_publish_from_list(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')    
    chat_list = message.text
    with open(f'./LOTS/{folder_name}/Finish_description.txt', 'w', encoding='utf-8') as channels_file:
        channels_file.write(f'{chat_list}   ,')    
        bot.send_message(message.chat.id, '‚úÖ –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        Finish_publish_time(message)
def Finish_Add_channel_to_list(message):
    chat_id = message.text
    bot_info = bot.get_me()
    bot_user_id = bot_info.id
    keyboard = types.InlineKeyboardMarkup()
    knopka = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∫–∞–Ω–∞–ª", callback_data='Finish_Add_channel_to_list')
    knopka2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='Finish_Back_to_list')
    keyboard.add(knopka)
    keyboard.add(knopka2)
    if '@' in chat_id:
        try: 
            chat_member = bot.get_chat_member(chat_id, bot_user_id)
            if chat_member.status == 'administrator':
                with open(f'./MyChannels.txt', 'a', encoding='utf-8') as description_file:
                    description_file.write(chat_id+",")
                bot.send_message(message.chat.id, f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤!", reply_markup=keyboard)
            else:
                bot.reply_to(message, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–º—è –µ—â—ë —Ä–∞–∑.')
                bot.register_next_step_handler(message, Add_channel_to_list)
        except Exception:
            bot.reply_to(message, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–º—è –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, Add_channel_to_list)
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ù—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: @channelname\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')               
        bot.register_next_step_handler(message, Add_channel_to_list)
def Finish_back_to_list(message):
    keyboard = types.InlineKeyboardMarkup()
    knopka2 = types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ/–∫–∞–Ω–∞–ª–∞—Ö –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data='Finish_Channel_for_publish_from_list')
    knopka = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫", callback_data='Finish_Add_channel_to_list')
    keyboard.add(knopka)
    with open(f'./MyChannels.txt', 'r') as description_file:
        data = description_file.read()
        if not data:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=keyboard)
        else:
            keyboard.add(knopka2)
            channels = data.split(",")
            spisok = ""
            if len(channels) == 1:
                spisok = channels[0].rstrip(',')
            else:
                for channel in channels:
                    spisok = spisok + channel + "\n"
            bot.send_message(message.chat.id, f'–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à?\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n{spisok}', reply_markup=keyboard)


###–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤ –æ—Ç –±–æ—Ç–∞
def Finish_publish_time(message):
    keyboard5 = types.InlineKeyboardMarkup()
    knopka5 = types.InlineKeyboardButton(text="–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å", callback_data='Finish_time_right_now')
    knopka6 = types.InlineKeyboardButton(text="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data='Finish_time_input')
    keyboard5.add(knopka5)
    keyboard5.add(knopka6)
    bot.send_message(message.chat.id, '‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?', reply_markup=keyboard5)
def Finish_set_publish_time(message):
    bot.send_message(message.chat.id, '‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è')
    now = datetime.datetime.now()
    ten_minutes = now + datetime.timedelta(minutes=10)
    one_hour = now + datetime.timedelta(hours=1)
    one_day = now + datetime.timedelta(days=1)
    one_week = now + datetime.timedelta(weeks=1)
    date_format = "%Y-%m-%d"
    time_format = "%H:%M"
    ten_minutes_formatted = ten_minutes.strftime(f"{date_format} {time_format}")
    one_hour_formatted = one_hour.strftime(f"{date_format} {time_format}")
    one_day_formatted = one_day.strftime(f"{date_format} {time_format}")
    one_week_formatted = one_week.strftime(f"{date_format} {time_format}")
    bot.send_message(message.chat.id, f'–ü—Ä–∏–º–µ—Ä—ã:\n\n{ten_minutes_formatted} - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n{one_hour_formatted} - —á–µ—Ä–µ–∑ —á–∞—Å\n{one_day_formatted} - —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n{one_week_formatted} - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é')
    bot.register_next_step_handler(message, Finish_set_publish_time2)
def Finish_set_publish_time2(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    variable_value = message.text
    current_time = datetime.datetime.now()
    try:
        variable_time = datetime.datetime.strptime(variable_value, "%Y-%m-%d %H:%M")
        if variable_time > current_time:
            with open(f'./LOTS/{folder_name}/Finish_description.txt', 'a', encoding='utf-8') as channels_file:
                channels_file.write(f'{message.text}   ,')    
            bot.send_message(message.chat.id, '‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
            Finish_check_final_post(message)
        else:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –ø—Ä–æ—à–ª–æ.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            Finish_set_publish_time(message)
    except Exception:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        Finish_set_publish_time(message)


###–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤ –æ—Ç –±–æ—Ç–∞
def Finish_check_final_post(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/Finish_description.txt', 'r') as file:
        data = file.read()
    values = data.split('   ,')
    with open(f'./LOTS/{folder_name}/Finish_message_data.pkl', 'rb') as file:
        text = pickle.load(file)
    publication_channel = values[0]
    publication_date =  values[1]
    if 'RightNow' in publication_date:
        publication_date = str('–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    file_extension = os.environ.get('FILE_EXTENSION')
    try:
        image_path = f'./LOTS/{folder_name}/Finish_file.{file_extension}'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        photo = open(image_path, 'rb')
        bot.send_photo(message.chat.id, photo, caption=text)
        photo.close()
    except Exception:
        bot.send_message(message.chat.id, f"{text}")
    keyboard5 = types.InlineKeyboardMarkup()
    knopka5 = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç", callback_data='Finish_save_post')
    knopka6 = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='Finish_cansel_sure')
    keyboard5.add(knopka5)
    keyboard5.add(knopka6)
    bot.send_message(message.chat.id, f'üßÆ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç\n\nüîö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—É–±–ª–∏–∫—É—é—Ç—Å—è:\n{publication_date}\nüîö –í –∫–∞–Ω–∞–ª–µ:\n{publication_channel}', reply_markup=keyboard5)


###–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ—Ç –±–æ—Ç–∞
def Finish_save_post(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/Finish_description.txt', 'r') as file:
        data = file.read()
    values = data.split('   ,')
    publication_date =  values[1]
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    HM_users = 9999999
    if "RightNow" in publication_date:
        now = datetime.datetime.now()
        publication_date = now + datetime.timedelta(minutes=1)
        current_time = datetime.datetime.strptime(current_time, "%Y-%m-%d %H:%M:%S")
        delay = (publication_date - current_time).total_seconds()
        thread = threading.Thread(target=Finish_send_message_to_time, args=(delay, HM_users,))
        thread.start()
        status = f'–±—É–¥–µ—Ç  –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã'  
    elif current_time < publication_date:
        current_time = datetime.datetime.strptime(current_time, "%Y-%m-%d %H:%M:%S")
        publication_date = publication_date + ':00'
        publication_date = datetime.datetime.strptime(publication_date, "%Y-%m-%d %H:%M:%S")
        delay = (publication_date - current_time).total_seconds()
        thread = threading.Thread(target=Finish_send_message_to_time, args=(delay, HM_users,))
        thread.start()
        status = f'–±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {publication_date}'
    else:
        status = '–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!'
    bot.send_message(message.chat.id, f'‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ {status}.\n\n–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ /start')


#–£—Ç–æ—á–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
def Finish_cancel_sure(message):
    keyboard = types.InlineKeyboardMarkup()
    knopka = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É", callback_data='Finish_back_to_post')
    knopka2 = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data='Finish_cansel')
    keyboard.add(knopka)
    keyboard.add(knopka2)
    bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç?', reply_markup=keyboard)


#–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
def Finish_cancel(message):
    path = f"{current_directory}/{os.environ.get('CURRENT_FOLDER_NAME')}"
    try:
        files = os.listdir(path)
        for file in files:
            file_path = os.path.join(path, file)
            os.remove(file_path)
        My_lots(message)
    except Exception:
        My_lots(message)

    
    
    
    
    
    path = f"{current_directory}/{os.environ.get('CURRENT_FOLDER_NAME')}"
    for root, dirs, files in os.walk(path, topdown=False):
        for name in files:
            os.remove(os.path.join(root, name))
        for name in dirs:
            os.rmdir(os.path.join(root, name))
    os.rmdir(path)
    bot.send_message(message.chat.id, '–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.', reply_markup=markup)


###–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
def Finish_send_message_to_time(delay, HM_users):
    time.sleep(delay)
    HM = HM_users
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/Finish_description.txt', 'r',  encoding='utf-8') as file:
        data = file.read()
    with open(f'./LOTS/{folder_name}/Finish_message_data.pkl', 'rb') as file:
        text = pickle.load(file) 
    file_extension = os.environ.get('FILE_EXTENSION')
    matches = re.findall(r'@[\w]+', data)
    channels = matches
    if len(channels) == 1:
        channel = matches[0]
        try:
            channel = channel.strip()
            image_path = f'./LOTS/{folder_name}/Finish_file.{file_extension}'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            photo = open(image_path, 'rb')
            bot.send_photo(channel, photo, caption=text)
            photo.close()
        except Exception:
            bot.send_message(channel, f"{text}")
    else:
        for channel in channels:
            try:
                image_path = f'./LOTS/{folder_name}/Finish_file.{file_extension}'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                photo = open(image_path, 'rb')
                bot.send_photo(channel, photo, caption=text)
                photo.close()        
            except Exception:
                bot.send_message(channel, f"{text}")


###–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
@bot.message_handler(commands=['My_channels'])
def My_channels_list(message):
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='Add_channel_to_list')
    keyboard.add(btn1)
    with open(f'./MyChannels.txt', 'r') as description_file:
        data = description_file.read()
        if not data:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=keyboard)
        else:
            channels = data.split(",")
            spisok = ""
            if len(channels) == 1:
                spisok = channels[0].rstrip(',')
            else:
                for channel in channels:
                    spisok = spisok + channel + "\n"
            bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n{spisok}–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=keyboard)
def add_new_channel(message):
    chat_id = message.text
    bot_info = bot.get_me()
    bot_user_id = bot_info.id
    if '@' in chat_id:
        try: 
            chat_member = bot.get_chat_member(chat_id, bot_user_id)
            if chat_member.status == 'administrator':
                with open(f'./MyChannels.txt', 'a', encoding='utf-8') as description_file:
                    description_file.write(chat_id+",")
                bot.send_message(message.chat.id, f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤!\n–ü–æ—Ä–∞ —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à!", reply_markup=markup)
            else:
                bot.reply_to(message, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–º—è –µ—â—ë —Ä–∞–∑.')
                bot.register_next_step_handler(message, add_new_channel)
        except Exception:
            bot.reply_to(message, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–º—è –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, add_new_channel)
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ù—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: @channelname\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')               
        bot.register_next_step_handler(message, add_new_channel)


###–ü—Ä–∏–µ–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def files_for_lot(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')    
    try:
        file_id = message.photo[-1].file_id if message.photo else message.video.file_id if message.video else message.document.file_id
        file_info = bot.get_file(file_id)        
        file_path = file_info.file_path
        url = f'https://api.telegram.org/file/bot{TOKEN}/{file_path}'
        file_extension = file_info.file_path.split('.')[-1]
        os.environ['FILE_EXTENSION'] = file_extension
        urllib.request.urlretrieve(url, f'./LOTS/{folder_name}/file.{file_extension}')    
        description = str(message.caption) if message.caption else 'No_Caption'
        with open(f'./LOTS/{folder_name}/message_data.pkl', 'wb') as file:
            pickle.dump(description, file)
        bot.send_message(message.chat.id, "‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception:
        description = str(message.text)
        with open(f'./LOTS/{folder_name}/message_data.pkl', 'wb') as file:
            pickle.dump(description, file)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤—É—é!", callback_data='btn_ver1')
    btn2 = types.InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data='btn_ver2')
    btn3 = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data='btn_ver3')
    btn4 = types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data='btn_ver4')
    keyboard.add(btn1)
    keyboard.add(btn2)
    keyboard.add(btn3)
    keyboard.add(btn4)    
    bot.send_message(message.chat.id, 'üì∞ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:', reply_markup=keyboard)


###–î–æ–±–∞–≤–ª–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def add_button_text(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/description.txt', 'w', encoding='utf-8') as description_file:
        description_file.write(f'{message.text}   ,')
    bot.send_message(message.chat.id, '‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    chose_channels_subscribe(message)


###–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
def chose_channels_subscribe(message): 
    keyboard = types.InlineKeyboardMarkup()
    knopka2 = types.InlineKeyboardButton(text="–ö–æ–Ω–∫—É—Ä—Å –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data='Without_Subscribe')
    knopka3 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data='Add_channels')
    keyboard.add(knopka3)
    keyboard.add(knopka2)
    with open(f'./MyChannels.txt', 'r') as description_file:
        data = description_file.read()
        if not data:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=keyboard)
        else:
            keyboard2 = types.InlineKeyboardMarkup()
            knopka = types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data='Channel_for_subscribe_from_list')
            knopka2 = types.InlineKeyboardButton(text="–ö–æ–Ω–∫—É—Ä—Å –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data='Without_Subscribe')
            knopka3 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data='Add_channels')
            keyboard2.add(knopka)
            keyboard2.add(knopka3)
            keyboard2.add(knopka2)
            channels = data.split(",")
            spisok = ""
            if len(channels) == 1:
                spisok = channels[0].rstrip(',')
            else:
                for channel in channels:
                    spisok = spisok + channel + "\n"
                bot.send_message(message.chat.id, f'üìä –°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n\n{spisok}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ:', reply_markup=keyboard2)
def add_more_subscribe_channels(message):
    chat_id = message.text
    bot_info = bot.get_me()
    bot_user_id = bot_info.id
    keyboard = types.InlineKeyboardMarkup()
    knopka = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∫–∞–Ω–∞–ª", callback_data='Add_channels')
    knopka2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='Back_to_list1')
    keyboard.add(knopka)
    keyboard.add(knopka2)
    if '@' in chat_id:
        try: 
            chat_member = bot.get_chat_member(chat_id, bot_user_id)
            if chat_member.status == 'administrator':
                with open(f'./MyChannels.txt', 'a', encoding='utf-8') as description_file:
                    description_file.write(chat_id+",")
                bot.send_message(message.chat.id, f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤!", reply_markup=keyboard)
            else:
                bot.reply_to(message, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–º—è –µ—â—ë —Ä–∞–∑.')
                bot.register_next_step_handler(message, add_more_subscribe_channels)
        except Exception:
            bot.reply_to(message, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–º—è –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, add_more_subscribe_channels)
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ù—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: @channelname\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')               
        bot.register_next_step_handler(message, add_more_subscribe_channels)
def chose_from_list(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')    
    chat_list = message.text
    with open(f'./LOTS/{folder_name}/channels.txt', 'w', encoding='utf-8') as channels_file:
        channels_file.write(f'{chat_list}   ,')    
        bot.send_message(message.chat.id, '‚úÖ –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        how_much_winners(message)


###–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç—É
def how_much_winners(message):
    bot.send_message(message.chat.id, 'üßÆ –°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç—É?\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
    bot.register_next_step_handler(message, how_much_winners2)
def how_much_winners2(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/description.txt', 'a', encoding='utf-8') as channels_file:
            channels_file.write(f'{message.text}:winner   ,')    
    bot.send_message(message.chat.id, '‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    publish_channel(message)        


###–í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def publish_channel(message):
    keyboard = types.InlineKeyboardMarkup()
    knopka2 = types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ/–∫–∞–Ω–∞–ª–∞—Ö –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data='Channel_for_publish_from_list')
    knopka = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫", callback_data='Add_channel_to_list1')
    keyboard.add(knopka)
    with open(f'./MyChannels.txt', 'r') as description_file:
        data = description_file.read()
        if not data:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=keyboard)
        else:
            keyboard.add(knopka2)
            channels = data.split(",")
            spisok = ""
            if len(channels) == 1:
                spisok = channels[0].rstrip(',')
            else:
                for channel in channels:
                    spisok = spisok + channel + "\n"
            bot.send_message(message.chat.id, f'üóì –í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à?\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n{spisok}', reply_markup=keyboard)
def Channel_for_publish_from_list(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')    
    chat_list = message.text
    with open(f'./LOTS/{folder_name}/description.txt', 'a', encoding='utf-8') as channels_file:
        channels_file.write(f'{chat_list}   ,')    
        bot.send_message(message.chat.id, '‚úÖ –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        publish_time(message)
def Add_channel_to_list(message):
    chat_id = message.text
    bot_info = bot.get_me()
    bot_user_id = bot_info.id
    keyboard = types.InlineKeyboardMarkup()
    knopka = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∫–∞–Ω–∞–ª", callback_data='Add_channel_to_list1')
    knopka2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='Back_to_list')
    keyboard.add(knopka)
    keyboard.add(knopka2)
    if '@' in chat_id:
        try: 
            chat_member = bot.get_chat_member(chat_id, bot_user_id)
            if chat_member.status == 'administrator':
                with open(f'./MyChannels.txt', 'a', encoding='utf-8') as description_file:
                    description_file.write(chat_id+",")
                bot.send_message(message.chat.id, f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤!", reply_markup=keyboard)
            else:
                bot.reply_to(message, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–º—è –µ—â—ë —Ä–∞–∑.')
                bot.register_next_step_handler(message, Add_channel_to_list)
        except Exception:
            bot.reply_to(message, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–º—è –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, Add_channel_to_list)
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ù—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: @channelname\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')               
        bot.register_next_step_handler(message, Add_channel_to_list)


###–í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
def publish_time(message):
    keyboard5 = types.InlineKeyboardMarkup()
    knopka5 = types.InlineKeyboardButton(text="–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å", callback_data='Time_right_now')
    knopka6 = types.InlineKeyboardButton(text="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data='Time_input')
    keyboard5.add(knopka5)
    keyboard5.add(knopka6)
    bot.send_message(message.chat.id, '‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?', reply_markup=keyboard5)
def set_publish_time(message):
    bot.send_message(message.chat.id, '‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è')
    now = datetime.datetime.now()
    ten_minutes = now + datetime.timedelta(minutes=10)
    one_hour = now + datetime.timedelta(hours=1)
    one_day = now + datetime.timedelta(days=1)
    one_week = now + datetime.timedelta(weeks=1)
    date_format = "%Y-%m-%d"
    time_format = "%H:%M"
    ten_minutes_formatted = ten_minutes.strftime(f"{date_format} {time_format}")
    one_hour_formatted = one_hour.strftime(f"{date_format} {time_format}")
    one_day_formatted = one_day.strftime(f"{date_format} {time_format}")
    one_week_formatted = one_week.strftime(f"{date_format} {time_format}")
    bot.send_message(message.chat.id, f'–ü—Ä–∏–º–µ—Ä—ã:\n\n{ten_minutes_formatted} - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n{one_hour_formatted} - —á–µ—Ä–µ–∑ —á–∞—Å\n{one_day_formatted} - —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n{one_week_formatted} - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é')
    bot.register_next_step_handler(message, set_publish_time2)
def set_publish_time2(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    variable_value = message.text
    current_time = datetime.datetime.now()
    try:
        variable_time = datetime.datetime.strptime(variable_value, "%Y-%m-%d %H:%M")
        if variable_time > current_time:
            with open(f'./LOTS/{folder_name}/description.txt', 'a', encoding='utf-8') as channels_file:
                channels_file.write(f'{message.text}   ,')    
            bot.send_message(message.chat.id, '‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
            end_lot_time(message)
        else:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –ø—Ä–æ—à–ª–æ.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            set_publish_time(message)
    except Exception:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        set_publish_time(message)


###–í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def end_lot_time(message):
    keyboard5 = types.InlineKeyboardMarkup()
    knopka5 = types.InlineKeyboardButton(text="–ü–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data='By_the_time')
    knopka6 = types.InlineKeyboardButton(text="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data='By_pass_count')
    keyboard5.add(knopka5)
    keyboard5.add(knopka6)
    bot.send_message(message.chat.id, '‚è∞ –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?', reply_markup=keyboard5)
def end_lot_time_by_the_time(message):
    bot.send_message(message.chat.id, '‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è')
    now = datetime.datetime.now()
    ten_minutes = now + datetime.timedelta(minutes=10)
    one_hour = now + datetime.timedelta(hours=1)
    one_day = now + datetime.timedelta(days=1)
    one_week = now + datetime.timedelta(weeks=1)
    date_format = "%Y-%m-%d"
    time_format = "%H:%M"
    ten_minutes_formatted = ten_minutes.strftime(f"{date_format} {time_format}")
    one_hour_formatted = one_hour.strftime(f"{date_format} {time_format}")
    one_day_formatted = one_day.strftime(f"{date_format} {time_format}")
    one_week_formatted = one_week.strftime(f"{date_format} {time_format}")
    bot.send_message(message.chat.id, f'–ü—Ä–∏–º–µ—Ä—ã:\n\n{ten_minutes_formatted} - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n{one_hour_formatted} - —á–µ—Ä–µ–∑ —á–∞—Å\n{one_day_formatted} - —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n{one_week_formatted} - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é')
    bot.register_next_step_handler(message, end_lot_time_by_the_time2)
def end_lot_time_by_the_time2(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    variable_value = message.text
    current_time = datetime.datetime.now()
    with open(f'./LOTS/{folder_name}/description.txt', 'r',  encoding='utf-8') as file:
        data = file.read()
    values = data.split('   ,')
    publication_date = values[3]
    if "RightNow" in publication_date:
        variable_time1 = datetime.datetime.now()
    else:
        variable_time1 = datetime.datetime.strptime(publication_date, "%Y-%m-%d %H:%M")
    try:
        variable_time2 = datetime.datetime.strptime(variable_value, "%Y-%m-%d %H:%M")
        if variable_time2 > current_time:
            if variable_time1 < variable_time2:
                with open(f'./LOTS/{folder_name}/description.txt', 'a', encoding='utf-8') as channels_file:
                    channels_file.write(f'{message.text}  time   ,')    
                bot.send_message(message.chat.id, '‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
                check_final_post(message)
            else:
                bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —Ä–∞–Ω—å—à–µ, —á–µ–º –æ–Ω –æ–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                end_lot_time_by_the_time(message)    
        else:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –ø—Ä–æ—à–ª–æ.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            end_lot_time_by_the_time(message)
    except Exception:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        end_lot_time_by_the_time(message)
def end_lot_time_by_pass_count(message):
    bot.send_message(message.chat.id, 'üßÆ –°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞?\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
    bot.register_next_step_handler(message, end_lot_time_by_pass_count2)
def end_lot_time_by_pass_count2(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    os.environ['CHAT_ID'] = str(message.chat.id)
    with open(f'./LOTS/{folder_name}/description.txt', 'a', encoding='utf-8') as channels_file:
            channels_file.write(f'{message.text}  participants   ,')    
    bot.send_message(message.chat.id, '‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    check_final_post(message)        


###–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç
def check_final_post(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/description.txt', 'r',  encoding='utf-8') as file:
        data = file.read()
    values = data.split('   ,')
    with open(f'./LOTS/{folder_name}/message_data.pkl', 'rb') as file:
        text = pickle.load(file)
    button_text = values[0]
    winners_value = values[1]
    winners_value1 = winners_value.split(':')
    winners_value2 = winners_value1[0]
    publication_channel = values[2]
    publication_date = values[3]
    if 'RightNow' in publication_date:
        publication_date = str('–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    way_of_ending = values[4]
    if 'participants' in way_of_ending:
        way_of_ending1 = way_of_ending.split("  ")
        way_of_ending2 = str(f'–ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {way_of_ending1[0]} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    else:
        way_of_ending1 = way_of_ending.split("  ")
        way_of_ending2 = str(f'–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ ({way_of_ending1[0]}) –≤—Ä–µ–º—è')
    with open(f'./LOTS/{folder_name}/channels.txt', 'r') as channels:
        channels_for_subscribe = channels.read()
        if 'Without_Subscribe' in channels_for_subscribe:
            channels_for_subscribe2 = str('–ë–µ–∑ –∫–∞–Ω–∞–ª–æ–≤, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫ –ø–æ–¥–ø–∏—Å–∫–µ')
        else:
            channels_for_subscribe1 = channels_for_subscribe.split(',')
            if channels_for_subscribe1[-1] == '':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π
                channels_for_subscribe1.pop()  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
            channels_for_subscribe2 = '\n'.join(channels_for_subscribe1)
    keyboard4 = types.InlineKeyboardMarkup()
    knopka4 = types.InlineKeyboardButton(text=f"{button_text}", callback_data='I`m_in')
    keyboard4.add(knopka4)
    file_extension = os.environ.get('FILE_EXTENSION')
    try:
        image_path = f'./LOTS/{folder_name}/file.{file_extension}'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        photo = open(image_path, 'rb')
        bot.send_photo(message.chat.id, photo, caption=text, reply_markup=keyboard4)
        photo.close()
    except Exception:
        bot.send_message(message.chat.id, f"{text}", reply_markup=keyboard4)
    keyboard5 = types.InlineKeyboardMarkup()
    knopka5 = types.InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data='Save_lot')
    knopka6 = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='Cansel_sure')
    keyboard5.add(knopka5)
    keyboard5.add(knopka6)
    bot.send_message(message.chat.id, f'üßÆ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à\n\nüîö –†–æ–∑—ã–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è:\n{publication_date}\nüîö –í –∫–∞–Ω–∞–ª–µ:\n{publication_channel}\n\nüîö –†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–∏—Ç—Å—è {way_of_ending2}\n\nüèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_value2}\n\nüòé –ö–∞–Ω–∞–ª—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫ –ø–æ–¥–ø–∏—Å–∫–µ: {channels_for_subscribe2}', reply_markup=keyboard5)


#–£—Ç–æ—á–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def Cancel_lot_sure(message):
    keyboard = types.InlineKeyboardMarkup()
    knopka = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É", callback_data='Back_to_lot')
    knopka2 = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data='Cansel')
    keyboard.add(knopka)
    keyboard.add(knopka2)
    bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à?', reply_markup=keyboard)


#–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def Cancel_lot(message):
    path = f"{current_directory}/{os.environ.get('CURRENT_FOLDER_NAME')}"
    for root, dirs, files in os.walk(path, topdown=False):
        for name in files:
            os.remove(os.path.join(root, name))
        for name in dirs:
            os.rmdir(os.path.join(root, name))
    os.rmdir(path)
    bot.send_message(message.chat.id, '–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.', reply_markup=markup)


#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def Save_lottery(message):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/description.txt', 'r',  encoding='utf-8') as file:
        data = file.read()
    values = data.split('   ,')
    with open(f'./LOTS/{folder_name}/message_data.pkl', 'rb') as file:
        text = pickle.load(file)
    publication_date = values[3]
    way_of_ending = values[4]
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if 'participants' in way_of_ending:
        way_of_ending1 = way_of_ending.split("  ")
        HM_users = (int(way_of_ending1[0])+1)
        if "RightNow" in publication_date:
            now = datetime.datetime.now()
            publication_date = now + datetime.timedelta(minutes=1)
            current_time = datetime.datetime.strptime(current_time, "%Y-%m-%d %H:%M:%S")
            delay = (publication_date - current_time).total_seconds()
            thread = threading.Thread(target=Send_message_to_time, args=(delay, HM_users,))
            thread.start()
            status = f'–±—É–¥–µ—Ç  –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã'  
        elif current_time < publication_date:
            current_time = datetime.datetime.strptime(current_time, "%Y-%m-%d %H:%M:%S")
            publication_date = publication_date + ':00'
            publication_date = datetime.datetime.strptime(publication_date, "%Y-%m-%d %H:%M:%S")
            delay = (publication_date - current_time).total_seconds()
            thread = threading.Thread(target=Send_message_to_time, args=(delay, HM_users,))
            thread.start()
            status = f'–±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {publication_date}'
        else:
            status = '–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!'
    else:
        HM_users = "9999999"
        if "RightNow" in publication_date:
            now = datetime.datetime.now()
            publication_date = now + datetime.timedelta(minutes=1)
            current_time = datetime.datetime.strptime(current_time, "%Y-%m-%d %H:%M:%S")
            delay = (publication_date - current_time).total_seconds()
            thread = threading.Thread(target=Send_message_to_time, args=(delay, HM_users,))
            thread.start()
            status = f'–±—É–¥–µ—Ç  –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã'  
        elif current_time < publication_date:
            current_time = datetime.datetime.strptime(current_time, "%Y-%m-%d %H:%M:%S")
            publication_date = publication_date + ':00'
            publication_date = datetime.datetime.strptime(publication_date, "%Y-%m-%d %H:%M:%S")
            delay = (publication_date - current_time).total_seconds()
            thread = threading.Thread(target=Send_message_to_time, args=(delay, HM_users,))
            thread.start()
            status = f'–±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {publication_date}'
        else:
            status = '–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!'
        current_time = datetime.datetime.now()
        way_of_ending1 = way_of_ending.split("  time")
        way_of_ending1 = way_of_ending1[0] + ':00'
        way_of_ending = datetime.datetime.strptime(way_of_ending1, "%Y-%m-%d %H:%M:%S")
        delay = (way_of_ending - current_time).total_seconds()
        thread1 = threading.Thread(target=finish_lot_by_the_time_alarm, args=(delay, message, text,))
        thread1.start()    
    bot.send_message(message.chat.id, f'‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ {status}.\n\n–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ /start')


###–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –ø–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def finish_lot_by_the_time_alarm(delay, message, text):
    if delay > 18000:
        time.sleep(delay - 18000)
        bot.send_message(message.chat.id, f'–ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤ –Ω–∞—Å—Ç–∞–Ω–µ—Ç –≤—Ä–µ–º—è –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à "{text[:30]}"\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –Ω–∞–∂–º–∏—Ç–µ "–û–∫–æ–Ω—á–∏—Ç—å".', reply_markup=markup)
    else:    
        time.sleep(delay)
        bot.send_message(message.chat.id, f'–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à "{text[:30]}"\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –Ω–∞–∂–º–∏—Ç–µ "–û–∫–æ–Ω—á–∏—Ç—å".', reply_markup=markup)


###–í—ã–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç
def Send_message_to_time(delay, HM_users):
    time.sleep(delay)
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    with open(f'./LOTS/{folder_name}/description.txt', 'r',  encoding='utf-8') as file:
        data = file.read()
    values = data.split('   ,')
    with open(f'./LOTS/{folder_name}/message_data.pkl', 'rb') as file:
        text = pickle.load(file)
    button_text = values[0]        
    keyboard = types.InlineKeyboardMarkup()
    callback_dataa = f"Registration_on_lot:{HM_users}"
    knopka = types.InlineKeyboardButton(text=f"{button_text}", callback_data=callback_dataa)
    keyboard.add(knopka)
    file_extension = os.environ.get('FILE_EXTENSION')
    publication_channels = values[2]
    channels = publication_channels.split(", ")
    if len(channels) == 1:
        channel = channels[0]
        try:
            image_path = f'./LOTS/{folder_name}/file.{file_extension}'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            photo = open(image_path, 'rb')
            sent_message = bot.send_photo(channel, photo, caption=text, reply_markup=keyboard)
            photo.close()
            message_link = f"https://t.me/{sent_message.chat.username}/{sent_message.message_id}"
            with open(f'./LOTS/{folder_name}/link.txt', 'a', encoding='utf-8') as link_file:
                link_file.write(message_link)    
        except Exception:
            sent_message = bot.send_message(channel, f"{text}", reply_markup=keyboard)
            message_link = f"https://t.me/{sent_message.chat.username}/{sent_message.message_id}"
            with open(f'./LOTS/{folder_name}/link.txt', 'a', encoding='utf-8') as link_file:
                link_file.write(message_link)    
    
    else:
        for channel in channels:
            try:
                image_path = f'./LOTS/{folder_name}/file.{file_extension}'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                photo = open(image_path, 'rb')
                sent_message = bot.send_photo(channel, photo, caption=text, reply_markup=keyboard)
                photo.close()
                message_link = f"https://t.me/{sent_message.chat.username}/{sent_message.message_id}"
                with open(f'./LOTS/{folder_name}/link.txt', 'a', encoding='utf-8') as link_file:
                    link_file.write(message_link)        
            except Exception:
                sent_message = bot.send_message(channel, f"{text}", reply_markup=keyboard)
                message_link = f"https://t.me/{sent_message.chat.username}/{sent_message.message_id}"
                with open(f'./LOTS/{folder_name}/link.txt', 'a', encoding='utf-8') as link_file:
                    link_file.write(message_link)    
        

###–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
def check_subscription(user, channel):
    user_id = user.id
    result = bot.get_chat_member(channel, user_id)
    if result.status == "left" or result.status == "kicked":
        return False
    return True



###–û—Ç–∫–ª–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    folder_name = os.environ.get('CURRENT_FOLDER_NAME')
    if callback.data == 'btn_ver1':
        with open(f'./LOTS/{folder_name}/description.txt', 'w', encoding='utf-8') as description_file:
            description_file.write("–£—á–∞—Å—Ç–≤—É—é!   ,")
        bot.send_message(callback.message.chat.id, '‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        chose_channels_subscribe(callback.message)
    elif callback.data == 'btn_ver2':
        with open(f'./LOTS/{folder_name}/description.txt', 'w', encoding='utf-8') as description_file:
            description_file.write("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å   ,")
        bot.send_message(callback.message.chat.id, '‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        chose_channels_subscribe(callback.message)    
    elif callback.data == 'btn_ver3':
        with open(f'./LOTS/{folder_name}/description.txt', 'w', encoding='utf-8') as description_file:
            description_file.write("–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ   ,")
        bot.send_message(callback.message.chat.id, '‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        chose_channels_subscribe(callback.message)
    elif callback.data == 'btn_ver4':
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n–ö–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Å–º–∞–π–ª—ã –∏ —ç–º–æ–¥–∑–∏!')
        bot.register_next_step_handler(callback.message, add_button_text)
    elif callback.data == 'Add_channels':    
        bot.send_message(callback.message.chat.id, '\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ:\n1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ (@{bot_info.username}) –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª)\n2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname.')
        bot.register_next_step_handler(callback.message, add_more_subscribe_channels)
    elif callback.data == 'Add_more_subscribe_channels':
        bot.send_message(callback.message.chat.id, '\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ:\n1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ (@{bot_info.username}) –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª)\n2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname.')
        bot.register_next_step_handler(callback.message, add_more_subscribe_channels)
    elif callback.data == 'Without_Subscribe':
        with open(f'./LOTS/{folder_name}/channels.txt', 'w', encoding='utf-8') as channels_file:
            channels_file.write('Without_Subscribe')    
        bot.send_message(callback.message.chat.id, '‚úÖ –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        how_much_winners(callback.message)        
    elif callback.data == 'Next_step':    
        bot.send_message(callback.message.chat.id, '‚úÖ –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        how_much_winners(callback.message)                
    elif callback.data == 'Channel_for_publish_from_list':
        bot.send_message(callback.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä:\n\n@channel1, @channel2')
        bot.register_next_step_handler(callback.message, Channel_for_publish_from_list)
    elif callback.data == 'Channel_for_subscribe_from_list':
        bot.send_message(callback.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä:\n\n@channel1, @channel2')
        bot.register_next_step_handler(callback.message, chose_from_list)
    elif callback.data == 'Add_channel_to_list1':
        bot.send_message(callback.message.chat.id, '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫:\n1. C–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n2. –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n@channelname')
        bot.register_next_step_handler(callback.message, Add_channel_to_list)
    elif callback.data == 'Time_right_now':
        with open(f'./LOTS/{folder_name}/description.txt', 'a', encoding='utf-8') as channels_file:
            channels_file.write('RightNow   ,')    
        bot.send_message(callback.message.chat.id, '‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
        end_lot_time(callback.message)        
    elif callback.data == 'Time_input':
        set_publish_time(callback.message)        
    elif callback.data == 'Add_channel_to_list':    
        bot.send_message(callback.message.chat.id, '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫:\n1. C–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n2. –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n@channelname')
        bot.register_next_step_handler(callback.message, add_new_channel)        
    elif callback.data == 'By_the_time':
        end_lot_time_by_the_time(callback.message)        
    elif callback.data == 'By_pass_count':    
        end_lot_time_by_pass_count(callback.message)        
    elif callback.data == 'Cansel_sure':    
        Cancel_lot_sure(callback.message)        
    elif callback.data == 'Cansel':    
        Cancel_lot(callback.message)        
    elif callback.data == 'Save_lot':    
        Save_lottery(callback.message)
    elif callback.data == 'Back_to_lot':    
        check_final_post(callback.message)    
    elif callback.data == 'Open_Lot':    
        bot.send_message(callback.message.chat.id, "–ö–∞–∫–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à –æ—Ç–∫—Ä—ã—Ç—å?\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\nMyLot1")
        bot.register_next_step_handler(callback.message, Open_lot)   
    elif callback.data == 'Back_to_My_Lots':    
        My_lots(callback.message)    
    elif callback.data == 'Back_to_list':    
        publish_channel(callback.message)    
    elif callback.data == 'Back_to_list1':    
        chose_channels_subscribe(callback.message)
    elif callback.data.startswith("Registration_on_lot:"):
        data_parts = callback.data.split(":")  
        HM_users = int(data_parts[1])
        owner = os.environ.get('CHAT_ID')
        owner = int(owner)
        user = callback.from_user
        folder_name = os.environ.get('CURRENT_FOLDER_NAME')
        with open(f'./LOTS/{folder_name}/members.txt', 'r') as text_file:
            spisok = text_file.read().split(',')
            users_count = len(spisok)    
            if users_count == HM_users or users_count > HM_users:
                bot.send_message(chat_id=owner, text='–ù–∞–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å"')
        text_file.close()
        uchastnik = str("@" + user.username)
        with open(f'./LOTS/{folder_name}/channels.txt', 'r') as channels:
            channels_for_subscribe = channels.read()
            if 'Without_Subscribe' in channels_for_subscribe:
                if uchastnik in spisok:
                    message = "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ü•≥\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ @CSKA_mil"
                else:
                    with open(f'./LOTS/{folder_name}/members.txt', 'a', encoding='utf-8') as text_file:
                        text_file.write(uchastnik + ",")
                    text_file.close()
                    message = "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ü•≥\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ @CSKA_mil"
            else:
                not_subscribed_channels = []
                channels_for_subscribe1 = re.findall(r'@[\w]+', channels_for_subscribe)
                for channel in channels_for_subscribe1:
                    user_id = user.id
                    subscribed = bot.get_chat_member(channel, user_id).status
                    if subscribed not in ['member', 'creator', 'administrator']:
                        not_subscribed_channels.append(channel)
                if not_subscribed_channels:
                    message = f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª: {', '.join(not_subscribed_channels)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
                else:
                    for_save = str(uchastnik)
                    if for_save in spisok:
                        message = "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ü•≥\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ @CSKA_mil"    
                    else: 
                        with open(f'./LOTS/{folder_name}/members.txt', 'a', encoding='utf-8') as text_file:
                            text_file.write(for_save + ",")
                        text_file.close()
                        message = "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ü•≥\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ @CSKA_mil"
        bot.answer_callback_query(callback_query_id=callback.id, text=message, show_alert=True)
    elif callback.data == 'Delete_Lot':
        bot.send_message(callback.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n\nMyLot1")
        bot.register_next_step_handler(callback.message, Delete_Lot)
    elif callback.data == 'Finish_Lot':
        finish_lot_now(callback.message)
    elif callback.data == 'Publish_results_by_bot':
        bot.send_message(callback.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–∞—Ä—Ç–Ω–∏–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –Ø –æ–ø—É–±–ª–∏–∫—É—é –∏—Ö –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.')
        bot.register_next_step_handler(callback.message, Publish_results_by_bot)
    elif callback.data == 'Publish_results_by_user':
        bot.send_message(callback.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!\n–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µüòã')
    elif callback.data == 'Finish_Channel_for_publish_from_list':
        bot.send_message(callback.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä:\n\n@channel1, @channel2')
        bot.register_next_step_handler(callback.message, Finish_Channel_for_publish_from_list)
    elif callback.data == 'Finish_Add_channel_to_list':
        bot.send_message(callback.message.chat.id, '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫:\n1. C–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n2. –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n@channelname')
        bot.register_next_step_handler(callback.message, Finish_Add_channel_to_list)
    elif callback.data == 'Finish_Back_to_list':
        Finish_back_to_list(callback.message)
    elif callback.data == 'Finish_time_right_now':
        with open(f'./LOTS/{folder_name}/Finish_description.txt', 'a', encoding='utf-8') as channels_file:
            channels_file.write('RightNow   ,')    
        bot.send_message(callback.message.chat.id, '‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
        Finish_check_final_post(callback.message)        
    elif callback.data == 'Finish_time_input':
        Finish_set_publish_time(callback.message)
    elif callback.data == 'Finish_save_post':    
        Finish_save_post(callback.message)
    elif callback.data == 'Finish_cansel_sure':    
        Finish_cancel_sure(callback.message)        
    elif callback.data == 'Finish_cansel':    
        Finish_cancel(callback.message)        
    elif callback.data == 'Finish_back_to_post':    
        Finish_check_final_post(callback.message)        






###–û—Ç–∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à":
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ "MyLot"
        max_number = 0
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫ –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
        for item in os.listdir(current_directory):
            if os.path.isdir(os.path.join(current_directory, item)) and item.startswith("MyLot"):
                try:
                    number = int(item.replace("MyLot", ""))
                    if number > max_number:
                        max_number = number
                except ValueError:
                    pass
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É "MyLot" —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        new_folder_name = f"MyLot{max_number + 1}"
        os.makedirs(os.path.join(current_directory, new_folder_name), exist_ok=True)
        os.environ['CURRENT_FOLDER_NAME'] = new_folder_name
        file_path = f"./LOTS/{new_folder_name}/members.txt"
        if not os.path.exists(file_path):
            with open(file_path, "w") as file:
                pass
        file_path = f"./LOTS/{new_folder_name}/link.txt"
        if not os.path.exists(file_path):
            with open(file_path, "w") as file:
                pass    
        bot.send_message(message.chat.id, f'–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ GIF, –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–º–µ—Ç–∫–æ–π.\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –º–µ–¥–∏–∞—Ñ–∞–π–ª')
        bot.register_next_step_handler(message, files_for_lot)
    elif message.text == "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏":
        My_lots(message)
    elif message.text == "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã":    
        My_channels_list(message)
    elif message.text == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        bot.send_message(message.chat.id, f'‚ÑπÔ∏è –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è - *—Å—Å—ã–ª–∫–∞*\n\n‚öôÔ∏è –ï—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ @air_hood_rich (–æ—Ç–≤–µ—Ç –Ω–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π, –∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)')


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()
